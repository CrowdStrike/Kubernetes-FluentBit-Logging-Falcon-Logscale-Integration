[SERVICE]
    # Flush
    # =====
    # set an interval of seconds before to flush records to a destination
    flush        1

    # Daemon
    # ======
    # instruct Fluent Bit to run in foreground or background mode.
    daemon       Off

    # Log_Level
    # =========
    # Set the verbosity level of the service, values can be:
    #
    # - error
    # - warning
    # - info
    # - debug
    # - trace
    #
    # by default 'info' is set, that means it includes 'error' and 'warning'.
    log_level    info

    # Parsers File
    # ============
    # specify an optional 'Parsers' configuration file
    parsers_file parsers.conf

    # Plugins File
    # ============
    # specify an optional 'Plugins' configuration file to load external plugins.
    plugins_file plugins.conf

    # HTTP Server
    # ===========
    # Enable/Disable the built-in HTTP Server for metrics
    http_server  Off
    http_listen  0.0.0.0
    http_port    2020

    # Storage
    # =======
    # Fluent Bit can use memory and filesystem buffering based mechanisms
    #
    # - https://docs.fluentbit.io/manual/administration/buffering-and-storage
    #
    # storage metrics
    # ---------------
    # publish storage pipeline metrics in '/api/v1/storage'. The metrics are
    # exported only if the 'http_server' option is enabled.
    #
    storage.metrics on

    # storage.path
    # ------------
    # absolute file system path to store filesystem data buffers (chunks).
    #
    # storage.path /tmp/storage

    # storage.sync
    # ------------
    # configure the synchronization mode used to store the data into the
    # filesystem. It can take the values normal or full.
    #
    # storage.sync normal

    # storage.checksum
    # ----------------
    # enable the data integrity check when writing and reading data from the
    # filesystem. The storage layer uses the CRC32 algorithm.
    #
    # storage.checksum off

    # storage.backlog.mem_limit
    # -------------------------
    # if storage.path is set, Fluent Bit will look for data chunks that were
    # not delivered and are still in the storage layer, these are called
    # backlog data. This option configure a hint of maximum value of memory
    # to use when processing these records.
    #
    # storage.backlog.mem_limit 5M

[INPUT]
    Name   docker_events
    Tag    docker_events
    Parser docker

[INPUT]
    Name   kmsg
    Tag    kernel

#==============
# Metrics
#==============
[INPUT]
    Name cpu
    Tag  cpu

[INPUT]
    Name mem
    Tag  mem

[INPUT]
    Name disk
    Tag disk.sda1
    Interval_Sec  1
    Interval_NSec 0
    Dev_Name sda1

[INPUT]
    Name disk
    Tag disk.sdb1
    Interval_Sec  1
    Interval_NSec 0
    Dev_Name sdb1

[INPUT]
    Name netif
    Tag netif
    Interface ens192
    Interval_Sec  1
    Interval_NSec 0
    Verbose true
    Test_At_Init true

[INPUT]
    Name netif
    Tag netif
    Interface docker0
    Interval_Sec  1
    Interval_NSec 0
    Verbose true
    Test_At_Init true

[INPUT]
    Name          proc
    Tag           process
    Proc_Name     kubelet
    Interval_Sec  10
    Interval_NSec 0
    Fd            true
    Mem           true

[INPUT]
    Name          proc
    Tag           process
    Proc_Name     dockerd
    Interval_Sec  10
    Interval_NSec 0
    Fd            true
    Mem           true

[INPUT]
    Name          proc
    Tag           process
    Proc_Name     containerd
    Interval_Sec  10
    Interval_NSec 0
    Fd            true
    Mem           true

[INPUT]
    Name          proc
    Tag           process
    Proc_Name     haproxy
    Interval_Sec  10
    Interval_NSec 0
    Fd            true
    Mem           true

[FILTER]
    Name parser
    Match cpu
    Parser json
    Key_Name cpu

[FILTER]
    Name record_modifier
    Match docker_events
    Record flb.source docker

[FILTER]
    Name record_modifier
    Match kernel
    Record flb.source kernel

[FILTER]
    Name record_modifier
    Match cpu
    Record flb.source cpu

[FILTER]
    Name record_modifier
    Match mem
    Record flb.source mem

[FILTER]
    Name record_modifier
    Match disk.*
    Record flb.source disk

[FILTER]
    Name record_modifier
    Match disk.sda1
    Record device sda1

[FILTER]
    Name record_modifier
    Match disk.sdb1
    Record device sdb1

[FILTER]
    Name record_modifier
    Match netif
    Record flb.source netif

[FILTER]
    Name record_modifier
    Match process
    Record flb.source process

[FILTER]
    Name record_modifier
    Match *
    Record hostname ${HOSTNAME}

[FILTER]
    Name lua
    Match *
    code function fbts(tag, timestamp, record) new_record = record new_record["flb.time"] = timestamp return 1, timestamp, new_record end
    call fbts

[OUTPUT]
    Name es
    Match *
    Host <<logscale hostname here>>
    Port 9200
    Index <<logscale repository here>>
    HTTP_User ingest
    HTTP_Passwd <<ingest token here>>
    Retry_Limit False
    tls        On
    tls.verify On

